<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="updatedContent" value="# Build stage&#10;FROM maven:3.9-eclipse-temurin-21 AS builder&#10;WORKDIR /build&#10;# Copy only the POM first to cache dependencies&#10;COPY pom.xml .&#10;RUN mvn dependency:go-offline&#10;&#10;# Copy source and build&#10;COPY src ./src&#10;RUN mvn clean package -DskipTests&#10;&#10;# Run stage&#10;FROM eclipse-temurin:21-jre-jammy&#10;WORKDIR /app&#10;&#10;# Create non-root user for security&#10;RUN addgroup --system --gid 1001 vertx &amp;&amp; \&#10;    adduser --system --uid 1001 --gid 1001 vertx&#10;&#10;# Copy only the fat JAR from builder stage&#10;COPY --from=builder /build/target/*-fat.jar app.jar&#10;RUN chown -R vertx:vertx /app&#10;&#10;# Switch to non-root user&#10;USER vertx&#10;&#10;# Environment variables&#10;ENV LOG_LEVEL=INFO&#10;ENV SHUTDOWN_TIMEOUT_MS=30000&#10;&#10;# Expose the application port&#10;EXPOSE 8080&#10;&#10;# Set the entry point with Java 21 optimizations&#10;ENTRYPOINT [&quot;java&quot;, \&#10;    &quot;--enable-preview&quot;, \&#10;    &quot;--enable-native-access=ALL-UNNAMED&quot;, \&#10;    &quot;-XX:+UseZGC&quot;, \&#10;    &quot;-XX:+ZGenerational&quot;, \&#10;    &quot;-Djdk.virtualThreadScheduler.parallelism=16&quot;, \&#10;    &quot;-jar&quot;, &quot;app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Vert.x API Gateway&#10;&#10;## Metrics and Monitoring&#10;&#10;The API Gateway exposes metrics in Prometheus format and includes JMX monitoring capabilities.&#10;&#10;### Prometheus Metrics&#10;&#10;Metrics are exposed at: `http://localhost:8080/metrics`&#10;&#10;Available metrics include:&#10;- HTTP request counters&#10;- Response time histograms&#10;- Active connections&#10;- JVM metrics&#10;- Custom business metrics&#10;&#10;### JMX Monitoring&#10;&#10;JMX metrics are exposed via the Prometheus JMX exporter on port 8081.&#10;&#10;To access JMX metrics:&#10;```bash&#10;# Prometheus format&#10;curl http://localhost:8081/metrics&#10;&#10;# Using JConsole&#10;jconsole service:jmx:rmi:///jndi/rmi://localhost:8081/jmxrmi&#10;```&#10;&#10;### Available Metrics&#10;&#10;1. Vert.x Metrics:&#10;   - vertx_http_server_connections&#10;   - vertx_http_server_requests_total&#10;   - vertx_http_server_response_time_seconds&#10;   - vertx_pool_usage&#10;   - vertx_eventbus_messages&#10;&#10;2. JVM Metrics:&#10;   - jvm_memory_used_bytes&#10;   - jvm_threads_states&#10;   - jvm_gc_collection_seconds&#10;   - process_cpu_usage&#10;   - system_cpu_usage&#10;&#10;3. Custom Gateway Metrics:&#10;   - gateway_active_connections&#10;   - gateway_requests_total&#10;   - gateway_request_duration_seconds&#10;&#10;### Grafana Dashboard&#10;&#10;A sample Grafana dashboard is available in the `monitoring` directory. Import it into your Grafana instance to visualize the metrics.&#10;&#10;### Docker Compose Setup&#10;&#10;To run the complete monitoring stack:&#10;&#10;```yaml&#10;version: '3.8'&#10;services:&#10;  api-gateway:&#10;    image: ghcr.io/your-repo/vertx-gateway-apis:latest&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;      - &quot;8081:8081&quot;&#10;&#10;  prometheus:&#10;    image: prom/prometheus&#10;    ports:&#10;      - &quot;9090:9090&quot;&#10;    volumes:&#10;      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml&#10;&#10;  grafana:&#10;    image: grafana/grafana&#10;    ports:&#10;      - &quot;3000:3000&quot;&#10;    depends_on:&#10;      - prometheus&#10;```&#10;&#10;Save this as `docker-compose.yml` and run:&#10;```bash&#10;docker-compose up -d&#10;```&#10;&#10;Access Grafana at http://localhost:3000 (default credentials: admin/admin)&#10;" />
              <option name="updatedContent" value="# Vert.x API Gateway&#10;&#10;## Metrics and Monitoring&#10;&#10;The API Gateway exposes metrics in Prometheus format and includes JMX monitoring capabilities.&#10;&#10;### Prometheus Metrics&#10;&#10;Metrics are exposed at: `http://localhost:8080/metrics`&#10;&#10;Available metrics include:&#10;- HTTP request counters&#10;- Response time histograms&#10;- Active connections&#10;- JVM metrics&#10;- Custom business metrics&#10;&#10;### JMX Monitoring&#10;&#10;JMX metrics are exposed via the Prometheus JMX exporter on port 8081.&#10;&#10;To access JMX metrics:&#10;```bash&#10;# Prometheus format&#10;curl http://localhost:8081/metrics&#10;&#10;# Using JConsole&#10;jconsole service:jmx:rmi:///jndi/rmi://localhost:8081/jmxrmi&#10;```&#10;&#10;### Available Metrics&#10;&#10;1. Vert.x Metrics:&#10;   - vertx_http_server_connections&#10;   - vertx_http_server_requests_total&#10;   - vertx_http_server_response_time_seconds&#10;   - vertx_pool_usage&#10;   - vertx_eventbus_messages&#10;&#10;2. JVM Metrics:&#10;   - jvm_memory_used_bytes&#10;   - jvm_threads_states&#10;   - jvm_gc_collection_seconds&#10;   - process_cpu_usage&#10;   - system_cpu_usage&#10;&#10;3. Custom Gateway Metrics:&#10;   - gateway_active_connections&#10;   - gateway_requests_total&#10;   - gateway_request_duration_seconds&#10;&#10;### Grafana Dashboard&#10;&#10;A sample Grafana dashboard is available in the `monitoring` directory. Import it into your Grafana instance to visualize the metrics.&#10;&#10;### Docker Compose Setup&#10;&#10;To run the complete monitoring stack:&#10;&#10;```yaml&#10;version: '3.8'&#10;services:&#10;  api-gateway:&#10;    image: ghcr.io/your-repo/vertx-gateway-apis:latest&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;      - &quot;8081:8081&quot;&#10;&#10;  prometheus:&#10;    image: prom/prometheus&#10;    ports:&#10;      - &quot;9090:9090&quot;&#10;    volumes:&#10;      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml&#10;&#10;  grafana:&#10;    image: grafana/grafana&#10;    ports:&#10;      - &quot;3000:3000&quot;&#10;    depends_on:&#10;      - prometheus&#10;```&#10;&#10;Save this as `docker-compose.yml` and run:&#10;```bash&#10;docker-compose up -d&#10;```&#10;&#10;Access Grafana at http://localhost:3000 (default credentials: admin/admin)&#10;&#10;## Local Development&#10;&#10;### Running with JMX Monitoring&#10;&#10;To run the application locally with JMX monitoring enabled, use the following Maven command:&#10;&#10;```bash&#10;JAVA_OPTS=&quot;-javaagent:monitoring/jmx/jmx_prometheus_javaagent.jar=8081:monitoring/config/jmx_prometheus_config.yaml&quot; mvn exec:java&#10;```&#10;&#10;This command will:&#10;- Start the application using Maven&#10;- Enable JMX monitoring on port 8081&#10;- Use the JMX Prometheus configuration from monitoring/config/jmx_prometheus_config.yaml&#10;- Expose metrics endpoint at http://localhost:8081/metrics&#10;&#10;You can then access:&#10;- The API Gateway at http://localhost:8080&#10;- Metrics endpoint at http://localhost:8081/metrics&#10;- JMX monitoring through JConsole or similar tools" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/docker/.dockerignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/docker/.dockerignore" />
              <option name="updatedContent" value="# Git&#10;.git&#10;.gitignore&#10;&#10;# Maven&#10;target/&#10;!target/*-fat.jar&#10;dependency-reduced-pom.xml&#10;&#10;# IDE files&#10;.idea/&#10;*.iml&#10;.vscode/&#10;.settings/&#10;.project&#10;.classpath&#10;&#10;# Logs&#10;*.log&#10;&#10;# OS files&#10;.DS_Store&#10;Thumbs.db" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>