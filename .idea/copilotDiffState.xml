<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="updatedContent" value="# Build stage&#10;FROM maven:3.9-eclipse-temurin-21 AS builder&#10;WORKDIR /build&#10;# Copy only the POM first to cache dependencies&#10;COPY pom.xml .&#10;RUN mvn dependency:go-offline&#10;&#10;# Copy source and build&#10;COPY src ./src&#10;RUN mvn clean package -DskipTests&#10;&#10;# Run stage&#10;FROM eclipse-temurin:21-jre-jammy&#10;WORKDIR /app&#10;&#10;# Create non-root user for security&#10;RUN addgroup --system --gid 1001 vertx &amp;&amp; \&#10;    adduser --system --uid 1001 --gid 1001 vertx&#10;&#10;# Copy only the fat JAR from builder stage&#10;COPY --from=builder /build/target/*-fat.jar app.jar&#10;RUN chown -R vertx:vertx /app&#10;&#10;# Switch to non-root user&#10;USER vertx&#10;&#10;# Environment variables&#10;ENV LOG_LEVEL=INFO&#10;ENV SHUTDOWN_TIMEOUT_MS=30000&#10;&#10;# Expose the application port&#10;EXPOSE 8080&#10;&#10;# Set the entry point with Java 21 optimizations&#10;ENTRYPOINT [&quot;java&quot;, \&#10;    &quot;--enable-preview&quot;, \&#10;    &quot;--enable-native-access=ALL-UNNAMED&quot;, \&#10;    &quot;-XX:+UseZGC&quot;, \&#10;    &quot;-XX:+ZGenerational&quot;, \&#10;    &quot;-Djdk.virtualThreadScheduler.parallelism=16&quot;, \&#10;    &quot;-jar&quot;, &quot;app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/METRICS.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/METRICS.md" />
              <option name="updatedContent" value="# Testing Java Agent and Metrics&#10;&#10;## Setup Instructions&#10;&#10;1. Create the required directories:&#10;```bash&#10;mkdir -p monitoring/{config,prometheus,grafana/{provisioning,dashboards}}&#10;```&#10;&#10;2. Download the JMX Prometheus Java Agent:&#10;```bash&#10;wget https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.19.0/jmx_prometheus_javaagent-0.19.0.jar \&#10;    -O monitoring/config/jmx_prometheus_javaagent.jar&#10;```&#10;&#10;3. The docker-compose.yml includes three services:&#10;   - api-gateway: Your Vert.x application with metrics&#10;   - prometheus: For storing metrics&#10;   - grafana: For visualizing metrics&#10;&#10;## Important Volume Mounts&#10;&#10;The docker-compose.yml includes several important volume mounts:&#10;&#10;1. For the api-gateway service:&#10;```yaml&#10;volumes:&#10;  - ./monitoring/config:/app/config&#10;```&#10;This mounts:&#10;- JMX Prometheus agent configuration&#10;- The agent JAR file&#10;- Custom configurations&#10;&#10;2. For Prometheus:&#10;```yaml&#10;volumes:&#10;  - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml&#10;  - prometheus_data:/prometheus&#10;```&#10;This mounts:&#10;- Prometheus configuration&#10;- Persistent storage for metrics&#10;&#10;3. For Grafana:&#10;```yaml&#10;volumes:&#10;  - grafana_data:/var/lib/grafana&#10;  - ./monitoring/grafana/provisioning:/etc/grafana/provisioning&#10;  - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards&#10;```&#10;This mounts:&#10;- Persistent storage for Grafana&#10;- Dashboards and data sources&#10;&#10;## Testing the Setup&#10;&#10;1. Start all services:&#10;```bash&#10;docker-compose up -d&#10;```&#10;&#10;2. Check the metrics endpoints:&#10;```bash&#10;# Vert.x metrics&#10;curl http://localhost:8080/metrics&#10;&#10;# JMX metrics&#10;curl http://localhost:8081/metrics&#10;```&#10;&#10;3. Access the monitoring tools:&#10;   - Prometheus: http://localhost:9090&#10;   - Grafana: http://localhost:3000 (admin/admin)&#10;&#10;4. Test with sample requests:&#10;```bash&#10;# Make some test requests&#10;curl http://localhost:8080/admin/services&#10;&#10;# Check metrics again to see the changes&#10;curl http://localhost:8080/metrics&#10;```&#10;&#10;## Available Metrics&#10;&#10;1. Vert.x Metrics (port 8080):&#10;   - HTTP server requests&#10;   - Event bus metrics&#10;   - Pool metrics&#10;   - Custom application metrics&#10;&#10;2. JMX Metrics (port 8081):&#10;   - JVM memory usage&#10;   - Garbage collection stats&#10;   - Thread counts&#10;   - System CPU usage&#10;   - Custom JMX metrics&#10;&#10;## Troubleshooting&#10;&#10;1. If metrics aren't showing up:&#10;```bash&#10;# Check container logs&#10;docker-compose logs api-gateway&#10;&#10;# Check if JMX agent is loaded&#10;docker-compose exec api-gateway ps aux | grep java&#10;```&#10;&#10;2. If Prometheus can't scrape:&#10;```bash&#10;# Check Prometheus targets&#10;open http://localhost:9090/targets&#10;```&#10;&#10;3. Volume permission issues:&#10;```bash&#10;# Fix permissions if needed&#10;chmod -R 777 monitoring/&#10;```&#10;&#10;## Monitoring Dashboard&#10;&#10;Access Grafana (http://localhost:3000) and create a new dashboard with these metrics:&#10;&#10;1. Request Rate:&#10;```promql&#10;rate(vertx_http_server_requests_total[1m])&#10;```&#10;&#10;2. Response Times:&#10;```promql&#10;histogram_quantile(0.95, rate(vertx_http_server_response_time_seconds_bucket[5m]))&#10;```&#10;&#10;3. JVM Memory:&#10;```promql&#10;jvm_memory_heap_used_bytes&#10;```&#10;&#10;4. Active Connections:&#10;```promql&#10;vertx_http_server_connections&#10;```" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="updatedContent" value="version: '3.8'&#10;&#10;services:&#10;  api-gateway:&#10;    image: ghcr.io/kiquetal/vertx-gateway-apis:latest&#10;    ports:&#10;      - &quot;8080:8080&quot;  # Application port&#10;      - &quot;8081:8081&quot;  # JMX Exporter metrics&#10;    environment:&#10;      - LOG_LEVEL=INFO&#10;      - JAVA_OPTS=-javaagent:/app/jmx_prometheus_javaagent.jar=8081:/app/config/jmx_prometheus_config.yaml&#10;    volumes:&#10;      - ./monitoring/config:/app/config&#10;    networks:&#10;      - monitoring&#10;&#10;  prometheus:&#10;    image: prom/prometheus:latest&#10;    ports:&#10;      - &quot;9090:9090&quot;&#10;    volumes:&#10;      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml&#10;      - prometheus_data:/prometheus&#10;    command:&#10;      - '--config.file=/etc/prometheus/prometheus.yml'&#10;      - '--storage.tsdb.path=/prometheus'&#10;      - '--web.console.libraries=/etc/prometheus/console_libraries'&#10;      - '--web.console.templates=/etc/prometheus/consoles'&#10;      - '--web.enable-lifecycle'&#10;    networks:&#10;      - monitoring&#10;&#10;  grafana:&#10;    image: grafana/grafana:latest&#10;    ports:&#10;      - &quot;3000:3000&quot;&#10;    environment:&#10;      - GF_SECURITY_ADMIN_USER=admin&#10;      - GF_SECURITY_ADMIN_PASSWORD=admin&#10;      - GF_USERS_ALLOW_SIGN_UP=false&#10;    volumes:&#10;      - grafana_data:/var/lib/grafana&#10;      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning&#10;      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards&#10;    networks:&#10;      - monitoring&#10;&#10;networks:&#10;  monitoring:&#10;    driver: bridge&#10;&#10;volumes:&#10;  prometheus_data:&#10;  grafana_data:" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/monitoring/config/jmx_prometheus_config.yaml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/monitoring/config/jmx_prometheus_config.yaml" />
              <option name="updatedContent" value="---&#10;lowercaseOutputName: true&#10;lowercaseOutputLabelNames: true&#10;rules:&#10;  # Vert.x specific metrics&#10;  - pattern: &quot;vertx&lt;[^&gt;]+&gt;&lt;([^&gt;]+)&gt;&quot;&#10;    name: vertx_$1&#10;    &#10;  # HTTP server metrics&#10;  - pattern: &quot;vertx.http.server.*&quot;&#10;    name: vertx_http_server_$1&#10;    &#10;  # Event bus metrics&#10;  - pattern: &quot;vertx.eventbus.*&quot;&#10;    name: vertx_eventbus_$1&#10;    &#10;  # JVM memory pools&#10;  - pattern: 'java.lang&lt;type=MemoryPool, name=(.*)&gt;&lt;&gt;Usage.(.+):'&#10;    name: jvm_memory_pool_$2_bytes&#10;    labels:&#10;      pool: $1&#10;      &#10;  # GC metrics&#10;  - pattern: 'java.lang&lt;type=GarbageCollector, name=(.*)&gt;&lt;&gt;CollectionCount'&#10;    name: jvm_gc_collection_count&#10;    labels:&#10;      gc: $1&#10;      &#10;  - pattern: 'java.lang&lt;type=GarbageCollector, name=(.*)&gt;&lt;&gt;CollectionTime'&#10;    name: jvm_gc_collection_time_seconds&#10;    labels:&#10;      gc: $1&#10;      &#10;  # Thread metrics&#10;  - pattern: 'java.lang&lt;type=Threading&gt;&lt;&gt;(.+):'&#10;    name: jvm_threads_$1&#10;    &#10;  # Memory metrics&#10;  - pattern: 'java.lang&lt;type=Memory&gt;&lt;&gt;HeapMemoryUsage.(.+):'&#10;    name: jvm_memory_heap_$1_bytes&#10;    &#10;  - pattern: 'java.lang&lt;type=Memory&gt;&lt;&gt;NonHeapMemoryUsage.(.+):'&#10;    name: jvm_memory_nonheap_$1_bytes&#10;    &#10;  # OS metrics&#10;  - pattern: 'java.lang&lt;type=OperatingSystem&gt;&lt;&gt;(.+):'&#10;    name: system_$1" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/monitoring/prometheus/prometheus.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/monitoring/prometheus/prometheus.yml" />
              <option name="updatedContent" value="global:&#10;  scrape_interval: 15s&#10;  scrape_timeout: 10s&#10;  evaluation_interval: 15s&#10;&#10;scrape_configs:&#10;  - job_name: 'vertx-application'&#10;    metrics_path: '/metrics'&#10;    static_configs:&#10;      - targets: ['api-gateway:8080']&#10;        labels:&#10;          application: 'vertx-gateway'&#10;          type: 'application'&#10;&#10;  - job_name: 'vertx-jmx'&#10;    metrics_path: '/metrics'&#10;    static_configs:&#10;      - targets: ['api-gateway:8081']&#10;        labels:&#10;          application: 'vertx-gateway'&#10;          type: 'jmx'" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/setup-monitoring.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/setup-monitoring.sh" />
              <option name="updatedContent" value="#!/bin/bash&#10;&#10;# Create monitoring directory structure&#10;mkdir -p monitoring/{config,prometheus,grafana/{provisioning,dashboards}}&#10;&#10;# Download JMX Prometheus Java Agent&#10;wget https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.19.0/jmx_prometheus_javaagent-0.19.0.jar \&#10;    -O monitoring/config/jmx_prometheus_javaagent.jar&#10;&#10;# Set proper permissions&#10;chmod -R 777 monitoring/&#10;&#10;echo &quot;Setup completed. You can now run: docker-compose up -d&quot;&#10;echo &quot;Access metrics at:&quot;&#10;echo &quot;  - Vert.x metrics: http://localhost:8080/metrics&quot;&#10;echo &quot;  - JMX metrics: http://localhost:8081/metrics&quot;&#10;echo &quot;  - Prometheus: http://localhost:9090&quot;&#10;echo &quot;  - Grafana: http://localhost:3000 (admin/admin)&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/docker/.dockerignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/docker/.dockerignore" />
              <option name="updatedContent" value="# Git&#10;.git&#10;.gitignore&#10;&#10;# Maven&#10;target/&#10;!target/*-fat.jar&#10;dependency-reduced-pom.xml&#10;&#10;# IDE files&#10;.idea/&#10;*.iml&#10;.vscode/&#10;.settings/&#10;.project&#10;.classpath&#10;&#10;# Logs&#10;*.log&#10;&#10;# OS files&#10;.DS_Store&#10;Thumbs.db" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>